2 . I changed passwd for user ubuntu. Basic parameters of the passwd:

-S --status - report password status on the named account
-l, --lock - lock the password of the named account
-u, --unlock - unlock the password of the named account
-d, --delete - delete the password for the named account

3. /etc/passwd - this file contains information about users. For expample:
root:x:0:0:root:/root:/bin/bash
where:
username: pswd: uid: gid: uid comments: directory: shell

/etc/shadow - this file contains information about users passwords.

w - this command shows list of active system users and what command they execute:
also this command shows LA, uptime, date, login time.

4. I changed home directory for ubuntu user with the help of 'usermod'

root@ubuntu:~# usermod -d /home/ubuntunew2 -m ubuntu
root@ubuntu:~# cat /etc/passwd | grep ubuntu

ubuntu:x:1000:1000::/home/ubuntunew2:/bin/bash

5. Using --help , for example: 
root@ubuntu:~# usermod -help

-d, --home HOME_DIR - new home directory for the user account
-m, --move-home - move contents of the home directory to the new location (use only with -d)

6. Opening file /root/.bashrc with the help of 'less' and searching phrase 'debian' using '/pattern'.

8.
root@ubuntu:~# ls -la
total 44
drwx------  5 root root 4096 Apr 18 20:36 .
drwxr-xr-x 23 root root 4096 Apr 17 19:47 ..
-rw-------  1 root root  736 Apr 18 17:41 .bash_history
-rw-r--r--  1 root root 3106 Oct 22  2015 .bashrc
drwx------  2 root root 4096 Apr 18 17:44 .cache
-rw-------  1 root root   42 Apr 18 20:36 .lesshst
drwxr-xr-x  2 root root 4096 Apr 18 17:20 .nano
-rw-r--r--  1 root root  148 Aug 17  2015 .profile
drwxr-xr-x  2 root root 4096 Apr 18 17:41 .ssh
-rw-------  1 root root 2512 Apr 18 18:11 .viminfo
-rw-------  1 root root   52 Apr 18 17:46 .Xauthority

./.bash_history - this file contains bash history.

./.bashrc - this file defines shell behavior.

./.ssh/ - this directory contains information about ssh keys

./.cache/ - this directory contains cache

PART2

1. Using tree
-L - sets the nesting level to display in the output. For example:

root@ubuntu:~# tree -L 2
.
+-- tes0000
¦   +-- test0001
¦   +-- text.sh
¦   L-- text.txt
+-- test1
¦   +-- test2
¦   +-- text.sh
¦   L-- text.txt
L-- test111
    +-- test222
    +-- text.sh
    L-- text.txt

-f - shows absolute file path.
-P - searching using pattern.
In example I search the executable files:
root@ubuntu:~# tree -f -P '*sh'
.
+-- ./tes0000
¦   +-- ./tes0000/test0001
¦   ¦   +-- ./tes0000/test0001/test0002
¦   ¦   ¦   L-- ./tes0000/test0001/test0002/test.sh
¦   ¦   L-- ./tes0000/test0001/test.sh
¦   L-- ./tes0000/text.sh
+-- ./test1
¦   +-- ./test1/test2
¦   ¦   +-- ./test1/test2/test3
¦   ¦   ¦   L-- ./test1/test2/test3/text.sh
¦   ¦   L-- ./test1/test2/text.sh
¦   L-- ./test1/text.sh
L-- ./test111
    +-- ./test111/test222
    ¦   +-- ./test111/test222/test333
    ¦   ¦   L-- ./test111/test222/test333/text.sh
    ¦   L-- ./test111/test222/text.sh
    L-- ./test111/text.sh

2. file - this command is used to determine file type. Examples:

root@ubuntu:/bin# ls -al | grep 'vdir'
-rwxr-xr-x  1 root root  126584 Mar  2  2017 vdir
root@ubuntu:/bin# file vdir
vdir: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=7908e06a2212d5cbe899263fdd1c0e67da29145a, stripped

root@ubuntu:~/tes0000# file text.txt
text.txt: ASCII text

3. I am in /etc/ssh:
root@ubuntu:/etc/ssh# pwd
/etc/ssh
3. 
To come back to home directory I input next command:

root@ubuntu:/etc/ssh# cd ~
root@ubuntu:~# pwd
/root

4. Using ls:

-l - to show data in a long listing format 

root@ubuntu:~# ls -l
total 12
drwxr-xr-x 3 root root 4096 Apr 18 22:05 tes0000
drwxr-xr-x 3 root root 4096 Apr 18 21:32 test1
drwxr-xr-x 3 root root 4096 Apr 18 21:33 test111

-a - do not ignore entries starting with .

root@ubuntu:~# ls -la
total 56
drwx------  8 root root 4096 Apr 18 22:05 .
drwxr-xr-x 23 root root 4096 Apr 17 19:47 ..
-rw-------  1 root root  736 Apr 18 17:41 .bash_history
-rw-r--r--  1 root root 3106 Oct 22  2015 .bashrc
drwx------  2 root root 4096 Apr 18 17:44 .cache
-rw-------  1 root root   42 Apr 18 20:36 .lesshst
drwxr-xr-x  2 root root 4096 Apr 18 17:20 .nano
-rw-r--r--  1 root root  148 Aug 17  2015 .profile
drwxr-xr-x  2 root root 4096 Apr 18 17:41 .ssh
drwxr-xr-x  3 root root 4096 Apr 18 22:05 tes0000
drwxr-xr-x  3 root root 4096 Apr 18 21:32 test1
drwxr-xr-x  3 root root 4096 Apr 18 21:33 test111
-rw-------  1 root root 4027 Apr 18 22:05 .viminfo
-rw-------  1 root root   52 Apr 18 17:46 .Xauthority

5.
root@ubuntu:~# mkdir testdirectory
root@ubuntu:~# ls -la > testdirectory/lslist.txt
root@ubuntu:~# cat testdirectory/lslist.txt
total 60
drwx------  9 root root 4096 Apr 18 22:15 .
drwxr-xr-x 23 root root 4096 Apr 17 19:47 ..
-rw-------  1 root root  736 Apr 18 17:41 .bash_history
-rw-r--r--  1 root root 3106 Oct 22  2015 .bashrc
drwx------  2 root root 4096 Apr 18 17:44 .cache
-rw-------  1 root root   42 Apr 18 20:36 .lesshst
drwxr-xr-x  2 root root 4096 Apr 18 17:20 .nano
-rw-r--r--  1 root root  148 Aug 17  2015 .profile
drwxr-xr-x  2 root root 4096 Apr 18 17:41 .ssh
drwxr-xr-x  3 root root 4096 Apr 18 22:05 tes0000
drwxr-xr-x  3 root root 4096 Apr 18 21:32 test1
drwxr-xr-x  3 root root 4096 Apr 18 21:33 test111
drwxr-xr-x  2 root root 4096 Apr 18 22:15 testdirectory
-rw-------  1 root root 4027 Apr 18 22:05 .viminfo
-rw-------  1 root root   52 Apr 18 17:46 .Xauthority
root@ubuntu:~# cp testdirectory/lslist.txt ./
root@ubuntu:~# rm -rf testdirectory
root@ubuntu:~# rm -f lslist.txt

6.
root@ubuntu:~# mkdir test
root@ubuntu:~# cp .bash_history ./test/labwork2
root@ubuntu:~# cd ./test/
root@ubuntu:~# ln ./labwork2 hardlink
root@ubuntu:~# ln -s ./labwork2 softlink
root@ubuntu:~/test# ls -li
total 8
140037 -rw------- 2 root root 736 Apr 18 22:20 hardlink
140037 -rw------- 2 root root 736 Apr 18 22:20 labwork2
140038 lrwxrwxrwx 1 root root  10 Apr 18 22:38 softlink -> ./labwork2

A hard link is sent to the same block of memory where the data is stored as well as the main file. Also hardlink and labwork2 have the same inode.
A soft link is just a pointer to a file.
I changed the data by opening a symbolic link and the data was changed in ./labwork2 and ./hardlink. It must be so, because I changed main file ./labwork2 by symbolic link.

root@ubuntu:~/test# mv hardlink hard_lnk_labwork2
root@ubuntu:~/test# mv softlink  symb_lnk_labwork2
root@ubuntu:~/test# rm labwork2
root@ubuntu:~/test# ls -la
total 12
drwxr-xr-x 2 root root 4096 Apr 18 22:56 .
drwx------ 9 root root 4096 Apr 18 22:47 ..
-rw------- 1 root root  744 Apr 18 22:47 hard_lnk_labwork2
lrwxrwxrwx 1 root root   10 Apr 18 22:38 symb_lnk_labwork2 -> ./labwork2

After removing ./labwork2 symb.link doesn't work because file ./labwork2 doesn't exist. But ./hard_lnk_labwork2 contains the data, because hard link points to the same block of memory where the data is stored as well as the main file.

7. Using locate:
root@ubuntu:~# locate -b traceroute
/etc/alternatives/traceroute6
/etc/alternatives/traceroute6.8.gz
/lib/modules/4.4.0-186-generic/kernel/drivers/tty/n_tracerouter.ko
/usr/bin/traceroute6
/usr/bin/traceroute6.iputils
/usr/share/man/man8/traceroute6.8.gz
/usr/share/man/man8/traceroute6.iputils.8.gz
/var/lib/dpkg/alternatives/traceroute6
root@ubuntu:~# locate -b squid
/usr/share/sosreport/sos/plugins/squid.py
/usr/share/sosreport/sos/plugins/__pycache__/squid.cpython-35.pyc
/usr/share/vim/vim74/syntax/squid.vim

8. Using lsblk . this command shows disks, patritions and their type.

NAME                  MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT
sda                     8:0    0    10G  0 disk
+-sda1                  8:1    0   731M  0 part  /boot
+-sda2                  8:2    0     1K  0 part
L-sda5                  8:5    0   9.3G  0 part
  +-ubuntu--vg-root   252:0    0   8.3G  0 lvm   /
  L-ubuntu--vg-swap_1 252:1    0   980M  0 lvm
    L-cryptswap1      252:2    0 979.5M  0 crypt [SWAP]
sr0                    11:0    1  1024M  0 rom

For exmaple:
sda - is disk
sda2 - is partition
ubuntu--vg-root is lvm. lvm is a abstraction under a partition, in simpe terms pertition in partition.

9. Using wc. 
File ./test.txt has 15 lines and I can know it by using 'wc -l':

root@ubuntu:~# wc -l test.txt
15 test.txt

10.Using find:

root@ubuntu:~# find /etc  -type f -name '*host*'
/etc/hosts.allow
/etc/host.conf
/etc/ssh/ssh_host_ed25519_key
/etc/ssh/ssh_host_rsa_key
/etc/ssh/ssh_host_ecdsa_key.pub
/etc/ssh/ssh_host_dsa_key
/etc/ssh/ssh_host_ecdsa_key
/etc/ssh/ssh_host_dsa_key.pub
/etc/ssh/ssh_host_ed25519_key.pub
/etc/ssh/ssh_host_rsa_key.pub
/etc/dbus-1/system.d/org.freedesktop.hostname1.conf
/etc/init.d/hostname.sh
/etc/init/hostname.sh.conf
/etc/init/hostname.conf
/etc/hosts
/etc/hosts.deny
/etc/hostname
 
11. Using ls -la + grep 

root@ubuntu:~# ls -la /etc | grep 'ss'
drwxr-xr-x  3 root root    4096 Apr 17 19:43 gss
drwxr-xr-x  3 root root    4096 Apr 17 19:21 insserv
-rw-r--r--  1 root root     771 Mar  6  2015 insserv.conf
drwxr-xr-x  2 root root    4096 Mar  6  2015 insserv.conf.d
-rw-r--r--  1 root root      26 Aug  5  2020 issue
-rw-r--r--  1 root root      19 Aug  5  2020 issue.net
-rw-r--r--  1 root root     497 May  4  2014 nsswitch.conf
-rw-r--r--  1 root root    1562 Apr 18 19:18 passwd
-rw-------  1 root root    1561 Apr 18 19:16 passwd-
drwxr-xr-x  2 root root    4096 Apr 18 17:40 ssh
drwxr-xr-x  4 root root    4096 Apr 17 19:51 ssl

12. The Linux kernel provides support for two types of devices - character and block. Their main difference is that for block devices, input / output operations are carried out not in separate bytes (characters), but in blocks of a fixed size.
root@ubuntu:~# ls -l /dev/
total 0
crw-------  1 root root     10, 235 Apr 18 12:04 autofs
drwxr-xr-x  2 root root         360 Apr 18 12:04 block
drwxr-xr-x  2 root root          80 Apr 18 12:04 bsg
crw-rw----  1 root disk     10, 234 Apr 18 12:04 btrfs-control
drwxr-xr-x  3 root root          60 Apr 18 12:04 bus
lrwxrwxrwx  1 root root           3 Apr 18 12:04 cdrom -> sr0
drwxr-xr-x  2 root root        3540 Apr 18 12:04 char
crw-------  1 root root      5,   1 Apr 18 12:05 console
lrwxrwxrwx  1 root root          11 Apr 18 12:03 core -> /proc/kcore
crw-------  1 root root     10,  59 Apr 18 12:04 cpu_dma_latency
crw-------  1 root root     10, 203 Apr 18 12:04 cuse
drwxr-xr-x  5 root root         100 Apr 18 12:04 disk
brw-rw----  1 root disk    252,   0 Apr 18 12:04 dm-0
brw-rw----  1 root disk    252,   1 Apr 18 12:04 dm-1

b - block devices
c- character devices

14. file - this command is used to determine file type. Examples:

root@ubuntu:/bin# ls -al | grep 'vdir'
-rwxr-xr-x  1 root root  126584 Mar  2  2017 vdir
root@ubuntu:/bin# file vdir
vdir: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 2.6.32, BuildID[sha1]=7908e06a2212d5cbe899263fdd1c0e67da29145a, stripped

15. I completed this task as follows:

root@ubuntu:~# find /etc -type f | head -n 5 | xargs stat | grep -e File -e Access -e Modify -e Change
 File: '/etc/rcS.d/README'
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)
Access: 2016-01-19 20:33:50.000000000 +0200
Modify: 2016-01-19 20:33:50.000000000 +0200
Change: 2021-04-17 19:21:28.099927000 +0300
  File: '/etc/cron.hourly/.placeholder'
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)
Access: 2016-04-06 00:59:09.000000000 +0300
Modify: 2016-04-06 00:59:09.000000000 +0300
Change: 2021-04-17 19:21:28.007927000 +0300
  File: '/etc/dhcp/dhclient-enter-hooks.d/resolvconf'
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)
Access: 2021-04-19 20:51:10.641495863 +0300
Modify: 2015-06-03 23:58:21.000000000 +0300
Change: 2021-04-17 19:21:28.019927000 +0300
  File: '/etc/dhcp/dhclient-exit-hooks.d/timesyncd'
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)
Access: 2021-04-19 20:51:10.657495919 +0300
Modify: 2020-04-18 16:37:15.000000000 +0300
Change: 2021-04-17 19:21:28.019927000 +0300
  File: '/etc/dhcp/dhclient-exit-hooks.d/rfc3442-classless-routes'
Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)
Access: 2021-04-19 20:51:10.657495919 +0300
Modify: 2016-04-13 18:56:48.000000000 +0300
Change: 2021-04-17 19:21:28.019927000 +0300


Where:
"find /etc -type f | head -n 5 " - showing first 5 files in /etc directory

"xargs stat | grep -e File -e Access -e Modify -e Change" and for first 5 files in /etc directory I implement 'stat' and 'grep -å'. 'stat' shows status of file and 'grep -e' does searching by pattern


1. /etc/passwd - this file contains information about users. For expample:
root:x:0:0:root:/root:/bin/bash
where:
username: pswd: uid: gid: uid comments: directory: shell

/etc/group - this file contains information about groups and groups members:
adm:x:4:syslog
where:
groupname: pswd: gid: groupmembers
Only the root user has a special status for the Linux kernel. There are, however, a few more pseudo-user
accounts that are used for system purposes. These bogus accounts can be identified by UID values,
which are typically less than 100. Typically, accounts with UIDs less than 10 belong to the system, and
UIDs 10 to 100 are reserved for pseudo-users associated with special programs.

2.
uid - unique identifier of the user within the system. uid is a simple numeric designation for an individual user. This is usually a positive number not more
than 65535 (sometimes 32-bit). Some identifiers are reserved for special use. These include 0 (root),
1-999(daemons, pseudo-users, system and reserved users), 1000+ (regular users).

gid - unique identifier of the group within the system to which the user belongs

3,4 I can know GID by executing "id":

ubuntu@ubuntu:/root$ id
uid=1000(ubuntu) gid=1000(ubuntu) groups=1000(ubuntu)

Or I can know user group by executing "groups" :
root@ubuntu:~# groups ubuntu2
ubuntu2 : ubuntu

5.
The commands for adding a user to the system are "useradd" and "adduser".
Basic parameters are: useradd [-c uid comment] [-d dir] [-e expire] [-f inactive] [-g gid] [-m [-k skel_dir]] [-s shell]
[-u uid [-o]] username
When we create a user without additional keys, we get the following result:

root@ubuntu:~# useradd ubuntu4

root@ubuntu:~# cat /etc/passwd | grep ubuntu4
ubuntu4:x:1003:1003::/home/ubuntu4:

UID, GUID, home directory was created by default.

6. Changing name of user:

 usermod -l newusername olusername

root@ubuntu:~# usermod -l ubuntu3 ubuntu23
ubuntu23:x:1002:1000::/home/ubuntu3:

But this command changes only username, not GID, UID, home directory.

7. skel_dir - contains files which must be copied to the new user's home directory.

root@ubuntu:~# ls -la /etc/skel/
total 20
drwxr-xr-x  2 root root 4096 Apr 17 19:21 .
drwxr-xr-x 91 root root 4096 Apr 22 22:51 ..
-rw-r--r--  1 root root  220 Sep  1  2015 .bash_logout
-rw-r--r--  1 root root 3771 Sep  1  2015 .bashrc
-rw-r--r--  1 root root  655 Jul 12  2019 .profile

8. deluser - this command uses for removing users. File /etc/deluser.conf contains configuration of removing. 
root@ubuntu:~# cat /etc/deluser.conf
To delete a user's mailbox I need to point "REMOVE_HOME = 1" in /etc/deluser.conf

root@ubuntu:~# cat /etc/deluser.conf
# /etc/deluser.conf: `deluser' configuration.

# Remove home directory and mail spool when user is removed
REMOVE_HOME = 1

# Remove all files on the system owned by the user to be removed
REMOVE_ALL_FILES = 0

# Backup files before removing them. This options has only an effect if
# REMOVE_HOME or REMOVE_ALL_FILES is set.
BACKUP = 0

# target directory for the backup file
BACKUP_TO = "."

# delete a group even there are still users in this group
ONLY_IF_EMPTY = 0

# exclude these filesystem types when searching for files of a user to backup
EXCLUDE_FSTYPES = "(proc|sysfs|usbfs|devpts|tmpfs|afs)"
 
9. 
usrmod -L -  lock the user account
usrmod -U - unlock the user account

10. passwd --expire "username"

11. 
root@ubuntu:~# ls -la
total 84
drwx------ 11 root root 4096 Apr 25 19:39 .
drwxr-xr-x 23 root root 4096 Apr 17 19:47 ..
-rw-------  1 root root 8885 Apr 24 21:18 .bash_history
-rw-r--r--  1 root root 3106 Oct 22  2015 .bashrc
drwx------  2 root root 4096 Apr 18 17:44 .cache
drwx------  3 root root 4096 Apr 24 17:44 .config
-rw-------  1 root root   42 Apr 18 20:36 .lesshst
drwxr-xr-x  2 root root 4096 Apr 18 17:20 .nano
-rw-r--r--  1 root root  148 Aug 17  2015 .profile
drwxr-xr-x  2 root root 4096 Apr 18 17:41 .ssh
drwxr-xr-x  3 root root 4096 Apr 18 22:05 tes0000
drwxr-xr-x  2 root root 4096 Apr 18 22:56 test
drwxr-xr-x  3 root root 4096 Apr 18 21:32 test1
drwxr-xr-x  3 root root 4096 Apr 18 21:33 test111
-rw-r--r--  1 root root  156 Apr 19 22:01 test.txt
drwxr-xr-x  2 root root 4096 Apr 22 22:37 .vim
-rw-------  1 root root 4384 Apr 25 19:39 .viminfo
-rw-------  1 root root  104 Apr 25 19:38 .Xauthority

permisson, count of hard links,owner,group,size,create/modefication date, name of file

12. 
drwxrwxrwx
13. 
14. chown USER FILE - this command is used for changing the owner of a file:

root@ubuntu:~# chown ubuntu: test.txt
-rw-r--r-- 1 ubuntu ubuntu 156 Apr 19 22:01 test.txt

chown -R USER DIRECTORY - recursive changing the owner of a files in directory: 

Before:

root@ubuntu:~/test1# ls -la test1/
total 12
drwxr-xr-x  3 root root 4096 Apr 18 21:32 .
drwx------ 11 root root 4096 Apr 25 19:39 ..
drwxr-xr-x  3 root root 4096 Apr 18 21:33 test2
-rwxr-xr-x  1 root root    0 Apr 18 21:32 text.sh
-rw-r--r--  1 root root    0 Apr 18 21:32 text.txt

After:
root@ubuntu:~# chown -R ubuntu: test1/
root@ubuntu:~# ls -la test1/
total 12
drwxr-xr-x  3 ubuntu ubuntu 4096 Apr 18 21:32 .
drwx------ 11 root   root   4096 Apr 25 19:39 ..
drwxr-xr-x  3 ubuntu ubuntu 4096 Apr 18 21:33 test2
-rwxr-xr-x  1 ubuntu ubuntu    0 Apr 18 21:32 text.sh
-rw-r--r--  1 ubuntu ubuntu    0 Apr 18 21:32 text.txt

chmod PERMISSON FILE - this command is used for changing the mode of access to the file

chmod -R PERMISSION DIRECTORY - recursive changing the mode of access to the files in directory.
Before:

ls -la test1/
total 12
drw-r--r--  3 ubuntu ubuntu 4096 Apr 18 21:32 .
drwx------ 11 root   root   4096 Apr 25 19:39 ..
drw-r--r--  3 ubuntu ubuntu 4096 Apr 18 21:33 test2
-rw-r--r--  1 ubuntu ubuntu    0 Apr 18 21:32 text.sh
-rw-r--r--  1 ubuntu ubuntu    0 Apr 18 21:32 text.txt

After:

root@ubuntu:~# chmod -R 666 test1/
root@ubuntu:~# ls -la test1/
total 12
drw-rw-rw-  3 ubuntu ubuntu 4096 Apr 18 21:32 .
drwx------ 11 root   root   4096 Apr 25 19:39 ..
drw-rw-rw-  3 ubuntu ubuntu 4096 Apr 18 21:33 test2
-rw-rw-rw-  1 ubuntu ubuntu    0 Apr 18 21:32 text.sh
-rw-rw-rw-  1 ubuntu ubuntu    0 Apr 18 21:32 text.txt

15.
When you create a file, you dont have to decide permissions up front. Permissions have defaults.
Those defaults can be controlled and modified using the umask command.

root@ubuntu:~# umask
0022

Using umask -S to see a human-readable notation:

root@ubuntu:~# umask -S
u=rwx,g=rx,o=rx

In this case, the user (u), owner of the file, has read, write and execution permissions on files.
Other users belonging to the same group (g) have read and execution permission, same as all the other users (o).

In the numeric notation, we typically change the last 3 digits.

Heres a list that gives a meaning to the number:

0 read, write, execute
1 read and write
2 read and execute
3 read only
4 write and execute
5 write only
6 execute only
7 no permissions

We can set a new value for the mask setting the value in numeric format:

umask 002
or you can change a specific roles permission:

umask g+r

16. 

drwxrwxrwt 2 ubuntu ubuntu 4096 Apr 26 21:22 test2.txt
-rwxrwxrwx 1 ubuntu ubuntu    0 Apr 26 21:20 test.txt


1. How many states could has a process in Linux?

1. RUNNING & RUNNABLE
2. INTERRRUPTABLE_SLEEP
3. UNINTERRUPTABLE_SLEEP
4. STOPPED
5. ZOMBIE

2. Examine the pstree command. Make output (highlight) the chain (ancestors) of the current
process:

The chain (ancestors) of the 14125
process:

root@ubuntu:~# pstree -sp 14125
systemd(1)---sshd(3687)---sshd(13992)---bash(14125)---pstree(14179)

3. What is a proc file system?

Proc file system (procfs) is virtual file system created on fly when system boots and is dissolved at time of system shut down.

It contains the useful information about the processes that are currently running, it is regarded as control and information centre for kernel.

The proc file system also provides communication medium between kernel space and user space.

4. Print information about the processor (its type, supported technologies, etc.).

In linux, /proc includes a directory for each running process, including kernel processes, in directories named /proc/PID, these are the directories present:

directory	description
/proc/PID/cmdline	Command line arguments.
/proc/PID/cpu	Current and last cpu in which it was executed.
/proc/PID/cwd	Link to the current working directory.
/proc/PID/environ	Values of environment variables.
/proc/PID/exe	Link to the executable of this process.
/proc/PID/fd	Directory, which contains all file descriptors.
/proc/PID/maps	Memory maps to executables and library files.
/proc/PID/mem	Memory held by this process.
/proc/PID/root	Link to the root directory of this process.
/proc/PID/stat	Process status.
/proc/PID/statm	Process memory status information.
/proc/PID/status	Process status in human readable form.

root@ubuntu:/proc# cat 14125/status
Name:   bash
State:  S (sleeping)
Tgid:   14125
Ngid:   0
Pid:    14125
PPid:   13992
TracerPid:      0
Uid:    0       0       0       0
Gid:    0       0       0       0
FDSize: 256
Groups: 0
NStgid: 14125
NSpid:  14125
NSpgid: 14125
NSsid:  14125
VmPeak:    22736 kB
VmSize:    22672 kB
VmLck:         0 kB
VmPin:         0 kB
VmHWM:      5492 kB
VmRSS:      5460 kB
VmData:     1868 kB
VmStk:       132 kB
VmExe:       976 kB
VmLib:      2312 kB
VmPTE:        68 kB
VmPMD:        12 kB
VmSwap:        0 kB
HugetlbPages:          0 kB
Threads:        1
SigQ:   0/3798
SigPnd: 0000000000000000
ShdPnd: 0000000000000000
SigBlk: 0000000000010000
SigIgn: 0000000000380004
SigCgt: 000000004b817efb
CapInh: 0000000000000000
CapPrm: 0000003fffffffff
CapEff: 0000003fffffffff
CapBnd: 0000003fffffffff
CapAmb: 0000000000000000
Seccomp:        0
Speculation_Store_Bypass:       thread vulnerable
Cpus_allowed:   1
Cpus_allowed_list:      0
Mems_allowed:   00000000,00000001
Mems_allowed_list:      0
voluntary_ctxt_switches:        1207
nonvoluntary_ctxt_switches:     508

5. Use the ps command to get information about the process. The information should be as
follows: the owner of the process, the arguments with which the process was launched for
execution, the group owner of this process, etc.

root@ubuntu:~# ps -F --pid 14920
UID        PID  PPID  C    SZ   RSS PSR STIME TTY          TIME CMD
root     14920 14866 49  1831   704   0 22:25 pts/1    00:07:43 dd if=/dev/zero of=/dev/null


root@ubuntu:~# ps -o group --pid 14920
GROUP
root

6. How to define kernel processes and user processes?

There are two different types of background processes.
There are kernel threads. These are a part of the Linux kernel, and each of them is started with its
own process identification number (PID). When managing processes, it is easy to recognize the kernel
processes because they have a name that is between square brackets. As an administrator, it is important to know that
kernel threads cannot be managed. You cannot adjust their priority; neither is it possible to kill them,
except by taking the entire machine down. 

7. Print the list of processes to the terminal. Briefly describe the statuses of the processes.
What condition are they in, or can they be arriving in?

root@ubuntu:~# ps auxfS
root         1  0.2  0.5  37756  5812 ?        Ss   Apr26  10:47 /sbin/init
root       337  0.0  0.2  28348  3004 ?        Ss   Apr26   0:01 /lib/systemd/systemd-journald
root       409  0.0  0.1 102964  1764 ?        Ss   Apr26   0:00 /sbin/lvmetad -f
root       423  0.0  0.4  44812  4440 ?        Ss   Apr26   0:12 /lib/systemd/systemd-udevd
systemd+   702  0.0  0.2 100320  2544 ?        Ssl  Apr26   0:00 /lib/systemd/systemd-timesyncd
root       855  0.0  0.3  28648  3200 ?        Ss   Apr26   0:00 /lib/systemd/systemd-logind
syslog     856  0.0  0.3 256388  3372 ?        Ssl  Apr26   0:00 /usr/sbin/rsyslogd -n
root       863  0.0  0.1   4392  1216 ?        Ss   Apr26   0:00 /usr/sbin/acpid
message+   865  0.0  0.3  42884  3784 ?        Ss   Apr26   0:01 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation
root       921  0.0  0.2  16120  2816 ?        Ss   Apr26   0:02 /sbin/dhclient -1 -v -pf /run/dhclient.enp0s3.pid -lf /var/lib/dhcp/dhclient.enp0s3.leases -I -df /var/lib/dhcp/dhclient6.en
daemon     951  0.0  0.2  26040  2272 ?        Ss   Apr26   0:00 /usr/sbin/atd -f
root       954  0.0  0.2  29004  3028 ?        Ss   Apr26   0:01 /usr/sbin/cron -f
root       956  0.0  0.6 275852  6260 ?        Ssl  Apr26   0:07 /usr/lib/accountsservice/accounts-daemon
root       959  0.0  0.2 644980  2980 ?        Ssl  Apr26   0:01 /usr/bin/lxcfs /var/lib/lxcfs/
root      1041  0.0  1.9 174628 19964 ?        Ssl  Apr26   0:00 /usr/bin/python3 /usr/share/unattended-upgrades/unattended-upgrade-shutdown --wait-for-signal
root      1077  0.0  0.0  13368   160 ?        Ss   Apr26   0:00 /sbin/mdadm --monitor --pid-file /run/mdadm/monitor.pid --daemonise --scan --syslog
root      1085  0.0  0.0   5216   152 ?        Ss   Apr26   0:14 /sbin/iscsid
root      1086  0.0  0.3   5716  3520 ?        S<Ls Apr26   1:06 /sbin/iscsid
root      1156  0.0  0.6 277176  6108 ?        Ssl  Apr26   0:00 /usr/lib/policykit-1/polkitd --no-debug
root      3687  0.0  0.6  65508  6288 ?        Ss   Apr26   0:55 /usr/sbin/sshd -D
root     14743  0.0  0.7 109352  7496 ?        Ss   22:14   0:01  \_ sshd: root@pts/1
root     14866  0.0  0.5  22580  5236 pts/1    Ss   22:14   0:01  |   \_ -bash
root     14920 49.7  0.0   7324   704 pts/1    R    22:25   8:52  |       \_ dd if=/dev/zero of=/dev/null
root     14983  0.0  0.3  37504  3404 pts/1    R+   22:43   0:00  |       \_ ps auxfS

PROCESS STATE CODES 
  Here are the different values that the s, stat and state output specifiers (header "STAT" or "S") will display to describe the state of a process:
D    uninterruptible sleep (usually IO)
I    Idle kernel thread
R    running or runnable (on run queue)
S    interruptible sleep (waiting for an event to complete)
T    stopped by job control signal
t    stopped by debugger during the tracing
W    paging (not valid since the 2.6.xx kernel)
X    dead (should never be seen)
Z    defunct ("zombie") process, terminated but not reaped by its parent

For BSD formats and when the stat keyword is used, additional characters may be displayed:

               <    high-priority (not nice to other users)
               N    low-priority (nice to other users)
               L    has pages locked into memory (for real-time and custom IO)
               s    is a session leader
               l    is multi-threaded (using CLONE_THREAD, like NPTL pthreads do)
               +    is in the foreground process group

8. Display only the processes of a specific user.

root@ubuntu:~# ps -fu ubuntu
UID        PID  PPID  C STIME TTY          TIME CMD
ubuntu    8773     1  0 Apr27 ?        00:00:00 /lib/systemd/systemd --user
ubuntu    8780  8773  0 Apr27 ?        00:00:00 (sd-pam)
ubuntu    8784  4432  0 Apr27 tty1     00:00:00 -bash

9. . What utilities can be used to analyze existing running tasks (by analyzing the help for the ps
command)?

root@ubuntu:~# ps auxfS | grep dd
root         2  0.0  0.0      0     0 ?        S    Apr27   0:00 [kthreadd]
root        67  0.0  0.0      0     0 ?        S<   Apr27   0:00  \_ [ipv6_addrconf]
root       414  0.0  0.0      0     0 ?        S<   Apr27   0:00  \_ [ib_addr]
message+   865  0.0  0.3  42884  3784 ?        Ss   Apr27   0:01 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation
root     14920 49.5  0.0   7324   704 pts/1    R    19:11  72:40  |       \_ dd if=/dev/zero of=/dev/null
root     15680  0.0  0.0  14220   972 pts/2    S+   21:38   0:00  |       \_ grep --color=auto dd
root     14281 76.4  0.0   7324   736 ?        R    16:19 243:24 dd if=/dev/zero of=/dev/null

10. What information does top command display?

top command is used to show the Linux processes. It provides a dynamic real-time view of the running system. Usually, this command shows the summary information of the system and the list of processes or threads which are currently managed by the Linux Kernel.

11.Display the processes of the specific user using the top command.

top -u "username" - this command shows processes of the specific user
root@ubuntu:~# top -u ubuntu

%Cpu(s): 30.8 us, 69.2 sy,  0.0 ni,  0.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
KiB Mem :  1015852 total,   340564 free,    72876 used,   602412 buff/cache
KiB Swap:  1003004 total,  1003004 free,        0 used.   765992 avail Mem

  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND
 8773 ubuntu    20   0   45304   4772   3984 S  0.0  0.5   0:00.10 systemd
 8780 ubuntu    20   0   79536   2008      0 S  0.0  0.2   0:00.00 (sd-pam)
 8784 ubuntu    20   0   22592   5236   3348 S  0.0  0.5   0:00.10 bash

12. What interactive commands can be used to control the top command? Give a couple of
examples.

htop, atop are interactive commands.

13. Sort the contents of the processes window using various parameters (for example, the
amount of processor time taken up, etc.)

For example:
<Shift>+<N>  sort by PID;
<Shift>+<P>  sort by CPU usage;
<Shift>+<M>  sort by Memory usage;
<Shift>+<T>  sort by Time usage;

14. Concept of priority, what commands are used to set priority?

When Linux processes are started, they are started with a specific priority. By default, all regular
processes are equal and are started with the same priority, which is the priority number 20. In some
cases, it is useful to change the default priority that was assigned to the process when it was started.
You can do that using the nice and renice commands. Use nice if you want to start a process with
an adjusted priority. Use renice to change the priority for a currently active process

15. Can I change the priority of a process using the top command? If so, how?

With the help of using "r" command from the "top" utility I can change the priority of a currently running process.

16. Examine the kill command. How to send with the kill command
process control signal? Give an example of commonly used signals

The Linux kernel allows many signals to be sent to processes. cesses. Use man for a complete overview of all the available
signals:

The signal SIGTERM (15) is used to ask a process to stop.
The signal SIGKILL (9) is used to force a process to stop. 
The SIGHUP (1) signal is used to hang up a process. The effect is that the process will reread its configuration files,
which makes this a useful signal to use after making modifications to a process configuration file.

root@ubuntu:~# kill -l
 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP
 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1
11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM
16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP
21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ
26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR
31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3
38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8
43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13
48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12
53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7
58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2
63) SIGRTMAX-1  64) SIGRTMAX

root@ubuntu:~# kill -9 14253
root@ubuntu:~# kill -15 12253

There are some commands that are related to kill: killall and pkill . The pkill command is a bit
easier to use because it takes the name rather than the PID of the process as an argument. You can
use the killall command if multiple processes using the same name need to be killed simultaneously. 

17. Commands jobs, fg, bg, nohup. What are they for? Use the sleep, yes command to
demonstrate the process control mechanism with fg, bg.

When we work with the Linux command line, sometimes we want to start a process and let it run in the background as a job.

In this way, it doesnt block the terminal, and we can do some other work while its running.

There are several ways to achieve this. In this tutorial, were going to discuss three common approaches: the disown and nohup commands, and the & operator.

Some job control commands and keyboard shortcuts first:

Ctrl-C: Kill the process running in the foreground by sending the signal SIGINT
Ctrl-Z: Suspend the process running in the foreground by sending the signal SIGTSTP
jobs: Display a list of the jobs with their status
fg: Move a background job into the foreground
bg: Resume suspended jobs by running them as background jobs

nohup: short for no hang up is a command in Linux systems that keep processes running even after exiting the shell or terminal. Nohup prevents the processes or jobs from receiving the SIGHUP (Signal Hang UP) signal. This is a signal that is sent to a process upon closing or exiting the terminal.

For example:

root@ubuntu:~# sleep 1000 & 
[3] 15719
root@ubuntu:~# jobs
[2]+  Stopped                 top
[3]-  Running                 sleep 1000 &
root@ubuntu:~# fg 3
sleep 1000
^Z
[3]+  Stopped                 sleep 1000
root@ubuntu:~# bg 3
[3]+ sleep 1000 &
root@ubuntu:~# jobs
[2]+  Stopped                 top
[3]-  Running                 sleep 1000 &

Part2.

1. - 
2. I disabled Server SSH Root Login in file /etc/ssh/sshd_config. image1, image2. Also I changed ssh-port to 41111.
3. Three ways to generate ssh-keys, what I have used
4. Implement port forwarding for the SSH client from the host machine to the guest Linux
virtual machine behind NAT. 

My host machine is 192.168.0.104, the quest machine is 10.0.2.15. I run the next command in the quest machine:

sudo ssh -N -R 22322:localhost:41111 ssh_user@192.168.0.104 -p 41111

In this case I created SSH-tunnel. My host machine was opened 22322 port which connected to 41111 port on my quest machine. Then I tryed to connect to my quest machine from host machine by implementing the next command:
 ssh ssh_usernat@localhost -p22322

And it was saccesful.

5. Intercept (capture) traffic (tcpdump, wireshark) while authorizing the remote client on the
server using ssh, telnet, rlogin. Analyze the result.


Intercept ssh-trafic by tcpdump:

13:45:14.523712 IP 10.0.2.15.40170 > 192.168.0.104.41111: Flags [P.], seq 4920:4996, ack 2689, win 65535, length 76

- The first field, 13:45:14.523712, represents the timestamp of the received packet as per the local clock.

- Next, IP represents the network layer protocolin this case, IPv4. For IPv6 packets, the value is IP6.

- The next field, 10.0.2.15.40170, is the source IP address and port. This is followed by the destination IP address and port, represented by 192.168.0.104.41111.

- After the source and destination, you can find the TCP Flags Flags [P.]. Typical values for this field include:

Value	Flag Type	Description
S	SYN	Connection Start
F	FIN	Connection Finish
P	PUSH	Data push
R	RST	Connection reset
.	ACK	Acknowledgment

- This field can also be a combination of these values, such as [S.] for a SYN-ACK packet.

- Next is the sequence number of the data contained in the packet. For the first packet captured, this is an absolute number. Subsequent packets use a relative number to make it easier to follow. In this example, the sequence is seq 196:568, which means this packet contains bytes 4920 to 4996 of this flow.

- This is followed by the Ack Number: ack 2689. In this case, it is 2689 since this is the side sending data. For the side receiving data, this field represents the next expected byte (data) on this flow.

- The next field is the window size win 65535, which represents the number of bytes available in the receiving buffer, followed by TCP options such as the MSS (Maximum Segment Size) or Window Scale. 

- Finally, we have the packet length, length 76, which represents the length, in bytes, of the payload data. The length is the difference between the last and first bytes in the sequence number.